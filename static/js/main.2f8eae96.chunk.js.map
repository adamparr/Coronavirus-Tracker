{"version":3,"sources":["components/Header.js","Helpers.js","components/sections/Global.js","components/sections/HistoryLineChart.js","components/sections/CircularBarChart.js","App.js","serviceWorker.js","index.js"],"names":["Header","numberWithCommas","x","toString","replace","Global","data","timeline","cases","deaths","recovered","Object","keys","length","prevCases","prevDeaths","prevRecovered","Grid","xs","sm","item","Card","className","HistoryLineChart","useState","timelineArray","setTimelineArray","useEffect","tempArray","map","key","date","dateFormat","CustomTooltip","payload","label","active","style","backgroundColor","value","md","height","margin","top","right","bottom","left","strokeDasharray","dataKey","content","type","stroke","CircularBarChart","name","fill","position","innerRadius","startAngle","endAngle","barSize","minAngle","background","clockwise","verticalAlign","App","props","componentDidMount","state","fetchData","globalData","updated","globalTimeline","fetch","then","results","json","setState","Container","container","spacing","justify","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2f8eae96.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n  return (\n    <header>\n      <h1>Coronavirus Tracker</h1> \n    </header>\n  )\n}","\nexport default function numberWithCommas(x) {\n  if (!x) return;\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport numberWithCommas from '../../Helpers'\n\nexport default function Global({data, timeline}) {\n\n  const { cases, deaths, recovered }  = data;\n  const yesterday = Object.keys(timeline)[Object.keys(timeline).length-1];\n  const { cases: prevCases, deaths: prevDeaths, recovered: prevRecovered } = timeline[yesterday];\n\n  return (\n    <>\n      <Grid xs={12} sm={4} item>\n        <Card className=\"card\">\n          <h3 className=\"card-title\">Cases</h3>\n          <span className=\"stat\">{numberWithCommas(cases)}</span>\n          <span className=\"prevStat\">{numberWithCommas(cases - prevCases)} today</span>\n          <div className=\"bar blue\"/>\n        </Card>\n      </Grid>\n\n      <Grid xs sm={4} item>\n        <Card className=\"card\">\n          <h3 className=\"card-title\">Deaths</h3>\n          <span className=\"stat\">{numberWithCommas(deaths)}</span>\n          <span className=\"prevStat\">{numberWithCommas(deaths - prevDeaths)} today</span>\n          <div className=\"bar red\"/>\n        </Card>\n      </Grid>\n\n      <Grid xs sm={4} item>\n        <Card className=\"card\">\n          <h3 className=\"card-title\">Recovered</h3>\n          <span className=\"stat\">{numberWithCommas(recovered)}</span>\n          <span className=\"prevStat\">{numberWithCommas(recovered - prevRecovered)} today</span>\n          <div className=\"bar green\"/>\n        </Card>\n      </Grid>\n    </>\n  )\n}\n","import React, { useState, useEffect } from \"react\"\nimport Grid from '@material-ui/core/Grid'\nimport Card from '@material-ui/core/Card'\nimport dateFormat from 'dateformat'\nimport numberWithCommas from '../../Helpers'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\n\nexport default function HistoryLineChart({timeline}) {\n\n  const [timelineArray, setTimelineArray] = useState([]);\n\n  useEffect(() => {\n    const tempArray = Object.keys(timeline).map(key => {\n      const date = dateFormat(key, \"mmm d\");\n      return (\n        {\n          date,\n          cases: timeline[key]['cases'], \n          deaths: timeline[key]['deaths'], \n          recovered: timeline[key]['recovered'],\n        }\n      )\n    })\n\n    setTimelineArray(tempArray);\n\n  }, [timeline])\n\n  const CustomTooltip = ({ payload, label, active }) => {\n    if (!active) return null;\n\n    return (\n      <div className=\"custom-tooltip\">\n        <p className=\"tt-label\">{label}</p>\n        <p className=\"tt-stat\" style={{backgroundColor: '#438ce6'}}>Cases: <span>{numberWithCommas(payload[0].value)}</span></p>\n        <p className=\"tt-stat\" style={{backgroundColor: '#e24f3f'}}>Deaths: <span>{numberWithCommas(payload[1].value)}</span></p>\n        <p className=\"tt-stat\" style={{backgroundColor: '#47bd61'}}>Recovered: <span>{numberWithCommas(payload[2].value)}</span></p>\n      </div>\n    )\n  }\n\n  return (\n    <Grid xs md={8} item>\n      <Card className=\"card\" style={{ height: 400 }}>\n        <h3 className=\"card-title\">Change Over Time</h3>\n        <ResponsiveContainer>\n          <LineChart margin={{top: 30,right: 15,bottom: 15,left: 15}} data={timelineArray}>\n            <CartesianGrid strokeDasharray=\"3 3\" />\n            <XAxis dataKey=\"date\" />\n            <YAxis />\n            <Tooltip content={<CustomTooltip />} />\n            <Line type=\"monotone\" dataKey=\"cases\" stroke=\"#438ce6\" />\n            <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"#e24f3f\" />\n            <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"#47bd61\" />\n          </LineChart>\n        </ResponsiveContainer>\n      </Card>\n    </Grid>\n  );\n}\n","import React from \"react\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Card from \"@material-ui/core/Card\";\nimport {\n  RadialBarChart,\n  RadialBar,\n  Legend,\n  ResponsiveContainer\n} from \"recharts\";\n\nexport default function CircularBarChart({ data }) {\n  data = [\n    {\n      name: \"deaths\",\n      value: data[\"deaths\"],\n      fill: \"#e24f3f\"\n    },\n    {\n      name: \"recovered\",\n      value: data[\"recovered\"],\n      fill: \"#47bd61\"\n    },\n    {\n      name: \"cases\",\n      value: data[\"cases\"],\n      fill: \"#438ce6\"\n    }\n  ];\n\n  return (\n    <Grid xs md={4} className=\"radial\" item>\n      <Card className=\"card\" style={{ height: 400, position: 'relative' }}>\n        <h3 className=\"card-title\">Radial Visualisation</h3>\n        <ResponsiveContainer>\n          <RadialBarChart\n            innerRadius=\"30%\" \n            data={data} \n            startAngle={90} \n            endAngle={-180}\n            barSize={40}\n          >\n            <RadialBar\n              minAngle={15}\n              label={{ fill: \"#fff\", position: \"insideStart\" }}\n              background={{fill: '#232731'}}\n              clockwise\n              dataKey=\"value\"\n            />\n            <Legend verticalAlign=\"top\" height={36}/>\n          </RadialBarChart>\n        </ResponsiveContainer>\n      </Card>\n    </Grid>\n  );\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Header from \"./components/Header\";\nimport Global from \"./components/sections/Global\";\nimport HistoryLineChart from './components/sections/HistoryLineChart';\nimport CircularBarChart from './components/sections/CircularBarChart'\n\nimport Grid from \"@material-ui/core/Grid\";\nimport Container from \"@material-ui/core/Container\";\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      globalData: {\n        cases: 0,\n        deaths: 0,\n        recovered: 0,\n        updated: 0\n      },\n      globalTimeline: {\n        \"2020-01-01\": {\n          cases: 0,\n          deaths: 0,\n          recovered: 0\n        }\n      }\n    };\n  }\n\n  componentDidMount = () => {\n    if (this.state.data == null) this.fetchData();\n  };\n\n  fetchData() {\n    // fetch global stats\n    fetch(\"https://api.coronastatistics.live/all\")\n      .then(results => {\n        return results.json();\n      })\n      .then(globalData => {\n        this.setState({ globalData });\n      });\n\n    // fetch global stats timeline\n    fetch(\"https://api.coronastatistics.live/timeline/global\")\n      .then(results => {\n        return results.json();\n      })\n      .then(globalTimeline => {\n        this.setState({ globalTimeline });\n      });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <Container className=\"globalStats\">\n          <Grid container spacing={3} justify=\"center\">\n            <Global\n              data={this.state.globalData}\n              timeline={this.state.globalTimeline}\n            />\n            <CircularBarChart data={this.state.globalData} />\n            <HistoryLineChart timeline={this.state.globalTimeline} />\n          </Grid>\n        </Container>\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}