{"version":3,"sources":["components/Header.js","Helpers.js","components/sections/Global.js","App.js","serviceWorker.js","index.js"],"names":["Header","numberWithCommas","x","toString","replace","Global","data","timeline","cases","deaths","recovered","yesterday","Object","keys","length","prevCases","prevDeaths","prevRecovered","timelineArray","map","key","date","dateFormat","console","log","Container","className","Grid","container","spacing","justify","xs","sm","item","Card","style","height","strokeDasharray","dataKey","type","stroke","App","props","componentDidMount","state","fetchData","globalData","updated","globalTimeline","fetch","then","results","json","setState","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"oTAEe,SAASA,IACtB,OACE,gCACE,oD,yDCJS,SAASC,EAAiBC,GACvC,GAAKA,EACL,OAAOA,EAAEC,WAAWC,QAAQ,wBAAyB,KCKxC,SAASC,EAAT,GAAmC,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,SAE5BC,EAA8BF,EAA9BE,MAAOC,EAAuBH,EAAvBG,OAAQC,EAAeJ,EAAfI,UACjBC,EAAYC,OAAOC,KAAKN,GAAUK,OAAOC,KAAKN,GAAUO,OAAO,GAHtB,EAI4BP,EAASI,GAArEI,EAJgC,EAIvCP,MAA0BQ,EAJa,EAIrBP,OAA+BQ,EAJV,EAIDP,UAExCQ,EAAgBN,OAAOC,KAAKN,GAAUY,KAAI,SAAAC,GAE9C,MACE,CACEC,KAHSC,IAAWF,EAAK,SAIzBZ,MAAOD,EAASa,GAAT,MACPX,OAAQF,EAASa,GAAT,OACRV,UAAWH,EAASa,GAAT,cAOjB,OAFAG,QAAQC,IAAIN,GAGV,kBAACO,EAAA,EAAD,CAAWC,UAAU,eACnB,kBAACC,EAAA,EAAD,CACEC,WAAS,EACTC,QAAS,EACTC,QAAQ,UAER,kBAACH,EAAA,EAAD,CAAMI,GAAI,GAAIC,GAAI,EAAGC,MAAI,GACvB,kBAACC,EAAA,EAAD,CAAMR,UAAU,QACd,qCACA,0BAAMA,UAAU,QAAQzB,EAAiBO,IACzC,0BAAMkB,UAAU,YAAYzB,EAAiBO,EAAQO,GAArD,UACA,yBAAKW,UAAU,eAInB,kBAACC,EAAA,EAAD,CAAMI,IAAE,EAACC,GAAI,EAAGC,MAAI,GAClB,kBAACC,EAAA,EAAD,CAAMR,UAAU,QACd,sCACA,0BAAMA,UAAU,QAAQzB,EAAiBQ,IACzC,0BAAMiB,UAAU,YAAYzB,EAAiBQ,EAASO,GAAtD,UACA,yBAAKU,UAAU,cAInB,kBAACC,EAAA,EAAD,CAAMI,IAAE,EAACC,GAAI,EAAGC,MAAI,GAClB,kBAACC,EAAA,EAAD,CAAMR,UAAU,QACd,yCACA,0BAAMA,UAAU,QAAQzB,EAAiBS,IACzC,0BAAMgB,UAAU,YAAYzB,EAAiBS,EAAYO,GAAzD,UACA,yBAAKS,UAAU,gBAInB,kBAACC,EAAA,EAAD,CAAMI,IAAE,EAACC,GAAI,EAAGC,MAAI,GAClB,kBAACC,EAAA,EAAD,CAAMR,UAAU,OAAOS,MAAO,CAACC,OAAQ,MACrC,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE9B,KAAMY,GAEN,kBAAC,IAAD,CAAemB,gBAAgB,QAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAMC,KAAK,WAAWD,QAAQ,QAAQE,OAAO,SAC7C,kBAAC,IAAD,CAAMD,KAAK,WAAWD,QAAQ,SAASE,OAAO,QAC9C,kBAAC,IAAD,CAAMD,KAAK,WAAWD,QAAQ,YAAYE,OAAO,gB,ICrE5CC,E,kDAEnB,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAmBRC,kBAAoB,WACK,MAAnB,EAAKC,MAAMtC,MAAc,EAAKuC,aAlBlC,EAAKD,MAAQ,CACXE,WAAY,CACVtC,MAAO,KACPC,OAAQ,KACRC,UAAW,KACXqC,QAAS,MAEXC,eAAgB,CACd,aAAc,CACZxC,MAAO,KACPC,OAAQ,KACRC,UAAW,QAdA,E,wDAwBN,IAAD,OAEVuC,MAAM,yCACLC,MAAK,SAAAC,GACJ,OAAOA,EAAQC,UACdF,MAAK,SAAAJ,GACN,EAAKO,SAAS,CAAEP,kBAIlBG,MAAM,qDACLC,MAAK,SAAAC,GACJ,OAAOA,EAAQC,UACdF,MAAK,SAAAF,GACN,EAAKK,SAAS,CAAEL,wB,+BAKlB,OACE,yBAAKtB,UAAU,OACb,kBAAC1B,EAAD,MACA,kBAACK,EAAD,CAAQC,KAAMgD,KAAKV,MAAME,WAAYvC,SAAU+C,KAAKV,MAAMI,sB,GAhDjCO,aCObC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLjD,QAAQiD,MAAMA,EAAMC,c","file":"static/js/main.065527e8.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Header() {\n  return (\n    <header>\n      <h1>Coronavirus Tracker</h1> \n    </header>\n  )\n}","\nexport default function numberWithCommas(x) {\n  if (!x) return;\n  return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\n}","import React from 'react'\nimport Grid from '@material-ui/core/Grid'\nimport Container from '@material-ui/core/Container'\nimport Card from '@material-ui/core/Card'\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer } from 'recharts'\nimport dateFormat from 'dateformat'\nimport numberWithCommas from '../../Helpers'\n\nexport default function Global({data, timeline}) {\n\n  const { cases, deaths, recovered }  = data;\n  const yesterday = Object.keys(timeline)[Object.keys(timeline).length-1];\n  const { cases: prevCases, deaths: prevDeaths, recovered: prevRecovered } = timeline[yesterday];\n\n  const timelineArray = Object.keys(timeline).map(key => {\n    const date = dateFormat(key, \"mmm d\");\n    return (\n      {\n        date,\n        cases: timeline[key]['cases'], \n        deaths: timeline[key]['deaths'], \n        recovered: timeline[key]['recovered']\n      }\n    )\n  })\n\n  console.log(timelineArray);\n\n  return (\n    <Container className=\"globalStats\">\n      <Grid\n        container\n        spacing={3}\n        justify=\"center\"\n      >\n        <Grid xs={12} sm={4} item>\n          <Card className=\"card\">\n            <h3>Cases</h3>\n            <span className=\"stat\">{numberWithCommas(cases)}</span>\n            <span className=\"prevStat\">{numberWithCommas(cases - prevCases)} today</span>\n            <div className=\"bar blue\"/>\n          </Card>\n        </Grid>\n\n        <Grid xs sm={4} item>\n          <Card className=\"card\">\n            <h3>Deaths</h3>\n            <span className=\"stat\">{numberWithCommas(deaths)}</span>\n            <span className=\"prevStat\">{numberWithCommas(deaths - prevDeaths)} today</span>\n            <div className=\"bar red\"/>\n          </Card>\n        </Grid>\n\n        <Grid xs sm={4} item>\n          <Card className=\"card\">\n            <h3>Recovered</h3>\n            <span className=\"stat\">{numberWithCommas(recovered)}</span>\n            <span className=\"prevStat\">{numberWithCommas(recovered - prevRecovered)} today</span>\n            <div className=\"bar green\"/>\n          </Card>\n        </Grid>\n\n        <Grid xs sm={8} item>\n          <Card className=\"card\" style={{height: 400}}>\n            <ResponsiveContainer>\n              <LineChart\n                data={timelineArray}\n              >\n                <CartesianGrid strokeDasharray=\"3 3\" />\n                <XAxis dataKey=\"date\" />\n                <YAxis />\n                <Tooltip />\n                <Line type=\"monotone\" dataKey=\"cases\" stroke=\"blue\"/>\n                <Line type=\"monotone\" dataKey=\"deaths\" stroke=\"red\"/>\n                <Line type=\"monotone\" dataKey=\"recovered\" stroke=\"green\"/>\n              </LineChart>\n            </ResponsiveContainer>\n          </Card>\n        </Grid>\n\n\n      </Grid>\n    </Container>\n  )\n}\n","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header'\nimport Global from './components/sections/Global'\n\nexport default class App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      globalData: {\n        cases: null,\n        deaths: null,\n        recovered: null,\n        updated: null\n      },\n      globalTimeline: {\n        '2020-01-01': {\n          cases: null,\n          deaths: null,\n          recovered: null\n        }\n      }\n    }\n  }\n\n  componentDidMount = () => {\n    if (this.state.data == null) this.fetchData();\n  }\n\n  fetchData() {\n    // fetch global stats\n    fetch('https://api.coronastatistics.live/all')\n    .then(results => {\n      return results.json();\n    }).then(globalData => {\n      this.setState({ globalData })\n    })\n\n    // fetch global stats timeline\n    fetch('https://api.coronastatistics.live/timeline/global')\n    .then(results => {\n      return results.json();\n    }).then(globalTimeline => {\n      this.setState({ globalTimeline })\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header/>\n        <Global data={this.state.globalData} timeline={this.state.globalTimeline} />\n\n\n\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}